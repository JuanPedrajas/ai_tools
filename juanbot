#!/usr/bin/env bash
# This script was generated by bashly 1.3.1 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if ((BASH_VERSINFO[0] < 4 || (BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] < 2))); then
  printf "bash version 4.2 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
juanbot_usage() {
  printf "juanbot - Connects AI to the pr review process\n\n"

  printf "%s\n" "Usage:"
  printf "  juanbot COMMAND\n"
  printf "  juanbot [COMMAND] --help | -h\n"
  printf "  juanbot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Gives a pr review and explains changes\n" "review"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
juanbot_review_usage() {
  printf "juanbot review - Gives a pr review and explains changes\n\n"
  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  juanbot review SOURCE [TARGET]\n"
  printf "  juanbot review --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SOURCE"
    printf "    Name of the new branch\n"
    echo

    # :argument.usage
    printf "  %s\n" "TARGET"
    printf "    Target baranch name (default: master)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  juanbot review ACC-224\n"
    printf "  juanbot review ACC-224 dev\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
juanbot_review_command() {

  # src/review_command.sh
  # Shows a loading message while a command runs.
  # Usage: run_with_loading "Your message here" command arg1 arg2 ...
  run_with_loading() {
      local message="$1"
      shift
      local command=("$@")

      echo "[-] $message" >&2
      # Execute command, capturing stdout, while allowing stderr to pass through.
      output=$("${command[@]}")
      local exit_code=$?
      echo "[+] DONE" >&2

      if [ $exit_code -ne 0 ]; then
          echo "Error: Command failed with exit code $exit_code" >&2
          return $exit_code
      fi

      echo "$output"
      return 0
  }

  # A function to sleep for a specified number of seconds while showing a loading animation.
  # Usage: sleep_with_loading <seconds>
  sleep_with_loading() {
    local duration=$1
    echo -n "Loading " >&2
    for (( i=0; i<duration; i++ )); do
      echo -n "." >&2
      sleep 1
    done
    echo "" # Move to the next line after finishing
  }

  # Gets the diff from a target branch.
  # Usage: get_diff [target_branch] [pr_branch]
  get_diff() {
      local target_branch="${1:-master}"
      local pr_branch="$2" # Can be empty if we are on the branch
      git diff "$target_branch" "$pr_branch"
  }

  # Gets an explanation of the diff from Gemini.
  # The diff content is piped into this function.
  get_explanation_from_gemini() {
      local diff_content
      diff_content=$(cat) # Read from stdin
      sleep_with_loading 5
      gemini -p "Explain the following diff: $diff_content"
  }

  # Generates the final review prompt.
  generate_review_prompt() {
      local changes="$1"
      local explanation="$2"

      cat <<-EOF
# I want you to review a pr, here is the information:
- look at the code in the current directory
- look at its architectural patterns
- only give feedback regarding architecture and security (take into account the overall project architecture)
The pr diff:
$changes

The explanation:
$explanation
EOF
  }

  generate_pr_review() {
      local prompt="$1"
      sleep_with_loading 5
      gemini -p "$prompt"
  }

  # Example: ./review_pr.sh my-feature-branch
  # Compares my-feature-branch against master.
  # If no arg is given, compares current branch against master.
  local source_branch=${args[source]}
  local target_branch=${args[target]:-"master"}

  local changes
  changes=$(run_with_loading "Retrieving PR diff..." get_diff "$target_branch" "$source_branch")
  if [ $? -ne 0 ]; then exit 1; fi

  local explanation_of_pr
  explanation_of_pr=$(echo "$changes" | run_with_loading "Understanding diff with Gemini..." get_explanation_from_gemini)
  if [ $? -ne 0 ]; then exit 1; fi

  local review_prompt
  review_prompt=$(generate_review_prompt "$changes" "$explanation_of_pr")

  pr_review=$(run_with_loading "Exploring code and being critic..." generate_pr_review "$review_prompt")
  if [ $? -ne 0 ]; then exit 1; fi

  echo "# Explained PR:"
  echo "$explanation_of_pr"
  echo "# The review:"
  echo "$pr_review"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        juanbot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    review | r)
      action="review"
      shift
      juanbot_review_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      juanbot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
juanbot_review_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        juanbot_review_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="review"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['source']+x} ]]; then
          args['source']=$1
          shift
        # :argument.case
        elif [[ -z ${args['target']+x} ]]; then
          args['target']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['source']+x} ]]; then
    printf "missing required argument: SOURCE\nusage: juanbot review SOURCE [TARGET]\n" >&2

    exit 1
  fi

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -e

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "review") juanbot_review_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # :command.start
  command_line_args=("$@")
  initialize
  run "${command_line_args[@]}"
fi
